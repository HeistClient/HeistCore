// ============================================================================
// FILE: TapEvent.java
// MODULE: core-rl
// PACKAGE: ht.heist.corerl.input
// -----------------------------------------------------------------------------
// TITLE
//   TapEvent — canonical click/tap data model for the entire project
//
// PURPOSE
//   - This is the single "source of truth" shape for a mouse click/tap
//     generated by your humanized mouse OR by real user input.
//   - Everyone uses this class: the event bus (TapBus), the HUD in-memory
//     store (ClickStore), the exporter (HeatmapExporter), and loggers.
//   - Keeping ONE shape avoids confusion (no more duplicate HeatPoint types).
//
// DESIGN
//   - Immutable: all fields are final; instances created via constructors
//     and convenience factories.
//   - Coordinates are CANVAS pixels (client.getCanvas() space).
//   - We can enrich this over time with world/scene coords or menu context.
//
// IMPORTANT
//   - "type" encodes DOWN, UP, or CLICK; for heatmap density we typically
//     treat DOWN or CLICK the same. You can filter if needed.
//   - "sessionId" lets you group events by run; set by the plugin at startup.
// ============================================================================

package ht.heist.corejava.api.input;

import java.util.Objects;

public final class TapEvent
{
    // ---- Enumerations -------------------------------------------------------
    public enum Type { DOWN, UP, CLICK }
    public enum Button { LEFT, RIGHT, MIDDLE, UNKNOWN }

    // ---- Core fields (always present) --------------------------------------
    public final long  tsMs;          // epoch millis when event occurred
    public final int   xCanvas;       // canvas-space X in pixels
    public final int   yCanvas;       // canvas-space Y in pixels
    public final Type  type;          // DOWN / UP / CLICK
    public final Button button;       // LEFT / RIGHT / MIDDLE / UNKNOWN
    public final boolean shift;       // state of Shift modifier when pressed
    public final boolean ctrl;        // state of Ctrl modifier when pressed
    public final boolean alt;         // state of Alt modifier when pressed
    public final String sessionId;    // run/session identifier (provided by plugin)

    // ---- Optional context (extend as needed) -------------------------------
    public final Integer worldX;      // optional: world coords (tile-based)
    public final Integer worldY;      // optional
    public final Integer plane;       // optional: plane 0..3
    public final Integer sceneX;      // optional: scene/local coords
    public final Integer sceneY;      // optional
    public final Integer widgetId;    // optional: clicked widget id
    public final String  menuOption;  // optional: "Walk here", "Wield", etc.
    public final String  menuTarget;  // optional: "Tree", "Yew longbow", etc.
    public final Integer opcode;      // optional: RL menu opcode
    public final Boolean processed;   // optional: whether the game accepted → "red click"

    // ---- Constructors / factories ------------------------------------------
    public TapEvent(
            long tsMs,
            int xCanvas, int yCanvas,
            Type type, Button button,
            boolean shift, boolean ctrl, boolean alt,
            String sessionId,
            Integer worldX, Integer worldY, Integer plane,
            Integer sceneX, Integer sceneY,
            Integer widgetId,
            String menuOption, String menuTarget, Integer opcode,
            Boolean processed)
    {
        this.tsMs = tsMs;
        this.xCanvas = xCanvas;
        this.yCanvas = yCanvas;
        this.type = Objects.requireNonNull(type, "type");
        this.button = Objects.requireNonNull(button, "button");
        this.shift = shift;
        this.ctrl = ctrl;
        this.alt = alt;
        this.sessionId = sessionId;

        this.worldX = worldX;
        this.worldY = worldY;
        this.plane = plane;
        this.sceneX = sceneX;
        this.sceneY = sceneY;
        this.widgetId = widgetId;
        this.menuOption = menuOption;
        this.menuTarget = menuTarget;
        this.opcode = opcode;
        this.processed = processed;
    }

    // Convenience: minimal CLICK (no extras)
    public static TapEvent click(long tsMs, int x, int y, Button b, boolean shift, boolean ctrl, boolean alt, String sessionId)
    {
        return new TapEvent(tsMs, x, y, Type.CLICK, b, shift, ctrl, alt, sessionId,
                null,null,null, null,null, null, null,null,null, null);
    }

    // Convenience: minimal DOWN
    public static TapEvent down(long tsMs, int x, int y, Button b, boolean shift, boolean ctrl, boolean alt, String sessionId)
    {
        return new TapEvent(tsMs, x, y, Type.DOWN, b, shift, ctrl, alt, sessionId,
                null,null,null, null,null, null, null,null,null, null);
    }

    // Convenience: minimal UP
    public static TapEvent up(long tsMs, int x, int y, Button b, boolean shift, boolean ctrl, boolean alt, String sessionId)
    {
        return new TapEvent(tsMs, x, y, Type.UP, b, shift, ctrl, alt, sessionId,
                null,null,null, null,null, null, null,null,null, null);
    }
}
